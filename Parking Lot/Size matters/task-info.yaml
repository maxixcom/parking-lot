type: edu
custom_name: stage4
files:
- name: src/parking/Main.kt
  visible: true
  text: |
    package parking

    fun main() {
        println("Hello, World!")
    }
  learner_created: false
- name: test/ParkingTest.kt
  visible: false
  text: |+
    import org.hyperskill.hstest.stage.StageTest
    import org.hyperskill.hstest.testcase.CheckResult
    import org.hyperskill.hstest.testcase.TestCase


    /** Default testCase. */
    fun <T> testCase(attach: T, input: String) = TestCase<T>().apply {
        setInput(input)
        setAttach(attach)
    }

    open class InputClue(
            val input: String,
            /** Do not show correct output and input. */
            val isPrivate: Boolean = false,
            /** Hint will be printed even for private tests. */
            val hint: String? = null
    ) {

        /** Ciphers [message] or adds a [hint] to the error if it is not null. */
        fun toFailure(message: String): CheckResult {
            if (isPrivate) {
                // Ciphered
                return CheckResult.wrong("Incorrect output. This is a private test. " + (hint ?: ""))
            } else {
                return CheckResult.wrong("$message ${hint ?: ""}")
            }
        }
    }

    fun inputCase(
            input: String,
            isPrivate: Boolean = false,
            hint: String? = null
    ) = testCase(InputClue(input, isPrivate, hint), input)

    class OutputClue(input: String, val output: String, isPrivate: Boolean, hint: String?)
        : InputClue(input, isPrivate, hint) {

        fun compareLines(reply: String): CheckResult {
            val hisLines = reply.trim().lines()
            val myLines = output.trim().lines()

            myLines.zip(hisLines).withIndex().forEach { (i, pair) ->
                val (my, his) = pair
                if (my != his) {
                    return toFailure("Error in line ${i + 1}: \"$his\" instead of \"$my\".")
                }
            }
            // if all common lines are correct, but sizes are different.
            if (hisLines.size != myLines.size) {
                return toFailure("Your output contains ${hisLines.size} " +
                        "lines instead of ${myLines.size}.")
            }
            return CheckResult.correct();
        }
    }

    fun outputCase(
            input: String,
            output: String,
            isPrivate: Boolean = false,
            hint: String? = null
    ) = testCase(OutputClue(input, output, isPrivate, hint), input)

    /** Trim Starts of all lines and trim empty lines. */
    fun String.trimAllIndents() = this.lines()
            .map { it.trimStart() }
            .dropWhile { it.isBlank() }
            .dropLastWhile { it.isBlank() }
            .joinToString("\n")


    class Task4Test : StageTest<OutputClue>() {

        override fun generate() = listOf(
                outputCase(
                        """
                            park KA-01-HH-9999 White
                            create 3
                            status
                            park KA-01-HH-9999 White
                            park KA-01-HH-3672 Green
                            park Rs-P-N-21 Red
                            leave 2
                            status
                            exit
                        """.trimAllIndents(),
                        """
                            Sorry, a parking lot has not been created.
                            Created a parking lot with 3 spots.
                            Parking lot is empty.
                            White car parked in spot 1.
                            Green car parked in spot 2.
                            Red car parked in spot 3.
                            Spot 2 is free.
                            1 KA-01-HH-9999 White
                            3 Rs-P-N-21 Red
                """.trimAllIndents(),
                        hint = "See example 1."),
                outputCase(
                        """
                            park KA-01-HH-9999 White
                            leave 1
                            status
                            exit
                        """.trimAllIndents(),
                        """
                            Sorry, a parking lot has not been created.
                            Sorry, a parking lot has not been created.
                            Sorry, a parking lot has not been created.
                """.trimAllIndents(),
                        true,
                        hint = "Check commands until the parking is created."),
                outputCase(
                        """
                            create 3
                            park KA-01-HH-9999 White
                            park KA-01-HH-9998 Red
                            status
                            create 1
                            status
                            park KA-01-HH-9999 Black
                            status
                            park KA-01-HH-9998 Black
                            exit
                        """.trimAllIndents(),
                        """
                            Created a parking lot with 3 spots.
                            White car parked in spot 1.
                            Red car parked in spot 2.
                            1 KA-01-HH-9999 White
                            2 KA-01-HH-9998 Red
                            Created a parking lot with 1 spots.
                            Parking lot is empty.
                            Black car parked in spot 1.
                            1 KA-01-HH-9999 Black
                            Sorry, the parking lot is full.
                """.trimAllIndents(),
                        true,
                        hint = "Try to recreate the parking.")


        )


        override fun check(reply: String, clue: OutputClue): CheckResult {

            return clue.compareLines(reply)
        }
    }

  learner_created: false
- name: src/parking/domain/entity/Car.kt
  visible: true
  text: |
    package parking.domain.entity

    data class Car(
        val regNumber: String,
        val color: String,
    )
  learner_created: true
- name: src/parking/console/command/CommandFactoryImpl.kt
  visible: true
  text: |
    package parking.console.command

    class CommandFactoryImpl : CommandFactory {
        private val commands: List<(String) -> Command?> = listOf(
            { input -> parseCreate(input) },
            { input -> parsePark(input) },
            { input -> parseLeave(input) },
            { input -> parseExit(input) },
        )

        override fun commandFromString(input: String) = commands.firstNotNullOfOrNull { it(input) } ?: CommandUnknown

        private fun parseCreate(input: String): Command? {
            return "^create\\s+(?<capacity>\\d+)$".toRegex().matchEntire(input)?.let {
                CommandCreate(
                    capacity = it.groups["capacity"]!!.value.toInt(),
                )
            }
        }

        private fun parsePark(input: String): Command? {
            return "^park\\s+(?<regNumber>[\\w-]+)\\s+(?<color>\\w+)$".toRegex().matchEntire(input)?.let {
                CommandPark(
                    regNumber = it.groups["regNumber"]!!.value,
                    color = it.groups["color"]!!.value,
                )
            }
        }

        private fun parseLeave(input: String): Command? {
            return "^leave\\s+(?<slotId>\\d+)$".toRegex().matchEntire(input)?.let {
                CommandLeave(it.groups["slotId"]!!.value.toInt())
            }
        }

        private fun parseExit(input: String): Command? {
            return "^exit$".toRegex().matchEntire(input)?.let {
                CommandExit
            }
        }
    }
  learner_created: true
- name: src/parking/domain/entity/Spot.kt
  visible: true
  text: |
    package parking.domain.entity

    data class Spot(
        val id: Int,
        var car: Car? = null,
    )
  learner_created: true
- name: src/parking/console/command/CommandExit.kt
  visible: true
  text: |
    package parking.console.command

    object CommandExit : Command
  learner_created: true
- name: src/parking/console/command/CommandCreate.kt
  visible: true
  text: |
    package parking.console.command

    class CommandCreate(val capacity: Int) : Command
  learner_created: true
- name: src/parking/domain/usecase/CreateParkingLot.kt
  visible: true
  text: |
    package parking.domain.usecase

    import parking.domain.entity.ParkingLot

    interface CreateParkingLot {
        fun execute(request: Request): Response

        data class Request(val capacity: Int)
        data class Response(val result: Result<ParkingLot>)
    }
  learner_created: true
- name: src/parking/domain/entity/ParkingLot.kt
  visible: true
  text: |
    package parking.domain.entity

    class ParkingLot(capacity: Int) {
        val spots = List(capacity) { Spot(it + 1) }
    }
  learner_created: true
- name: src/parking/domain/exception/SpotNotFoundException.kt
  visible: true
  text: |
    package parking.domain.exception

    class SpotNotFoundException(message: String) : Exception(message)
  learner_created: true
- name: src/parking/console/command/Command.kt
  visible: true
  text: |
    package parking.console.command

    sealed interface Command
  learner_created: true
- name: src/parking/console/command/CommandUnknown.kt
  visible: true
  text: |
    package parking.console.command

    object CommandUnknown : Command
  learner_created: true
- name: src/parking/application/interactor/CreateParkingLotImpl.kt
  visible: true
  text: |
    package parking.application.interactor

    import parking.domain.usecase.CreateParkingLot
    import parking.persistence.ParkingLotRegistry

    class CreateParkingLotImpl(
        private val parkingLotRegistry: ParkingLotRegistry
    ) : CreateParkingLot {
        override fun execute(request: CreateParkingLot.Request): CreateParkingLot.Response {
            val result = kotlin.runCatching {
                parkingLotRegistry.create(request.capacity)
                parkingLotRegistry.get()!!
            }
            return CreateParkingLot.Response(result)
        }
    }
  learner_created: true
- name: src/parking/console/Runner.kt
  visible: true
  text: |
    package parking.console

    import parking.console.command.Command
    import parking.console.command.CommandCreate
    import parking.console.command.CommandExit
    import parking.console.command.CommandLeave
    import parking.console.command.CommandPark
    import parking.console.command.CommandUnknown

    class Runner {
        private val commandFactory = Application.commandFactory
        private val parkingLotController = Application.parkingLotController

        fun run() {
            main@ while (true) {
                do {
                    val command = enterCommand()
                    when (command) {
                        CommandExit -> break@main
                        is CommandLeave -> parkingLotController.leaveSpot(command)
                        is CommandPark -> parkingLotController.parkCar(command)
                        is CommandCreate -> parkingLotController.create(command)
                        is CommandUnknown -> println("Unknown command! Try again.")
                    }
                } while (command == CommandUnknown)
            }
            // TODO: No bye at the moment
    //        println("Bye!")
        }

        private fun enterCommand(): Command {
    //        print("> ")
            return Application.commandFactory.commandFromString(readLine()!!)
        }
    }
  learner_created: true
- name: src/parking/domain/exception/NoEmptySpotException.kt
  visible: true
  text: |
    package parking.domain.exception

    class NoEmptySpotException(message: String = "Sorry, the parking lot is full.") : Exception(message)
  learner_created: true
- name: src/parking/domain/usecase/LeaveSpot.kt
  visible: true
  text: |
    package parking.domain.usecase

    import parking.domain.entity.Car

    interface LeaveSpot {
        fun execute(request: Request): Response

        data class Request(val spotId: Int)
        data class Response(val result: Result<Car>)
    }
  learner_created: true
- name: src/parking/application/gateway/ParkingLotGatewayImpl.kt
  visible: true
  text: |
    package parking.application.gateway

    import parking.domain.entity.Car
    import parking.domain.entity.Spot
    import parking.domain.exception.NotCreatedException
    import parking.domain.gateway.ParkingLotGateway
    import parking.persistence.ParkingLotRegistry

    class ParkingLotGatewayImpl(
        private val parkingLotRegistry: ParkingLotRegistry
    ) : ParkingLotGateway {
        override fun park(car: Car, spot: Spot): Spot {
            spot.car = car
            return spot
        }

        override fun leave(spot: Spot): Car? {
            val car = spot.car
            spot.car = null
            return car
        }

        override fun findSpotById(id: Int): Spot? {
            val parkingLot = parkingLotRegistry.get() ?: throw NotCreatedException()
            return parkingLot.spots.firstOrNull { it.id == id }
        }

        override fun findEmptySpot(): Spot? {
            val parkingLot = parkingLotRegistry.get() ?: throw NotCreatedException()
            return parkingLot.spots.firstOrNull { it.car == null }
        }
    }
  learner_created: true
- name: src/parking/console/controller/ParkingLotControllerImpl.kt
  visible: true
  text: |
    package parking.console.controller

    import parking.console.command.CommandCreate
    import parking.console.command.CommandLeave
    import parking.console.command.CommandPark
    import parking.domain.usecase.CreateParkingLot
    import parking.domain.usecase.LeaveSpot
    import parking.domain.usecase.ParkCar

    class ParkingLotControllerImpl(
        val parkCar: ParkCar,
        val leaveSpot: LeaveSpot,
        val createParkingLot: CreateParkingLot,
    ) : ParkingLotController {
        override fun parkCar(command: CommandPark) {
            val response = parkCar.execute(
                ParkCar.Request(
                    regNumber = command.regNumber,
                    color = command.color
                )
            )
            response.result.fold(
                {
                    println("${it.car!!.color} car parked in spot ${it.id}.")
                },
                {
                    println(it.message)
                }
            )
        }

        override fun leaveSpot(command: CommandLeave) {
            val response = leaveSpot.execute(
                LeaveSpot.Request(
                    spotId = command.spotId,
                )
            )
            response.result.fold(
                {
                    println("Spot ${command.spotId} is free.")
                },
                {
                    println(it.message)
                }
            )
        }

        override fun create(commandCreate: CommandCreate) {
            val response = createParkingLot.execute(
                CreateParkingLot.Request(
                    capacity = commandCreate.capacity
                )
            )
            response.result.fold(
                {
                    println("Created a parking lot with ${it.spots.size} spots.")
                },
                {
                    println(it.message)
                }
            )
        }
    }
  learner_created: true
- name: src/parking/domain/exception/NotCreatedException.kt
  visible: true
  text: |
    package parking.domain.exception

    class NotCreatedException(message: String = "Parking Lot is not created") : Exception(message)
  learner_created: true
- name: src/parking/application/interactor/ParkCarImpl.kt
  visible: true
  text: |
    package parking.application.interactor

    import parking.domain.entity.Car
    import parking.domain.exception.NoEmptySpotException
    import parking.domain.gateway.ParkingLotGateway
    import parking.domain.usecase.ParkCar

    class ParkCarImpl(
        private val parkingLotGateway: ParkingLotGateway
    ) : ParkCar {
        override fun execute(request: ParkCar.Request): ParkCar.Response {
            val result = kotlin.runCatching {
                parkingLotGateway.findEmptySpot()?.let { spot ->
                    spot.car = with(request) {
                        Car(
                            regNumber = regNumber,
                            color = color
                        )
                    }
                    spot
                } ?: throw NoEmptySpotException()
            }
            return ParkCar.Response(result)
        }
    }
  learner_created: true
- name: src/parking/persistence/ParkingLotRegistry.kt
  visible: true
  text: |
    package parking.persistence

    import parking.domain.entity.ParkingLot

    interface ParkingLotRegistry {
        fun create(capacity: Int)
        fun get(): ParkingLot?
    }
  learner_created: true
- name: src/parking/domain/usecase/ParkCar.kt
  visible: true
  text: |
    package parking.domain.usecase

    import parking.domain.entity.Spot

    interface ParkCar {
        fun execute(request: Request): Response

        data class Request(val regNumber: String, val color: String)
        data class Response(val result: Result<Spot>)
    }
  learner_created: true
- name: src/parking/console/command/CommandPark.kt
  visible: true
  text: |
    package parking.console.command

    class CommandPark(val regNumber: String, val color: String) : Command
  learner_created: true
- name: src/parking/application/interactor/LeaveSpotImpl.kt
  visible: true
  text: |
    package parking.application.interactor

    import parking.domain.exception.NoCarException
    import parking.domain.exception.SpotNotFoundException
    import parking.domain.gateway.ParkingLotGateway
    import parking.domain.usecase.LeaveSpot

    class LeaveSpotImpl(
        private val parkingLotGateway: ParkingLotGateway
    ) : LeaveSpot {
        override fun execute(request: LeaveSpot.Request): LeaveSpot.Response {
            val result = kotlin.runCatching {
                val spot = parkingLotGateway.findSpotById(request.spotId)
                    ?: throw SpotNotFoundException("Spot ${request.spotId} is not found on the parking lot")
                spot.car ?: throw NoCarException("There is no car in spot ${request.spotId}.")

                parkingLotGateway.leave(spot)!!
            }
            return LeaveSpot.Response(result)
        }
    }
  learner_created: true
- name: src/parking/domain/exception/NoCarException.kt
  visible: true
  text: |
    package parking.domain.exception

    class NoCarException(message: String) : Exception(message)
  learner_created: true
- name: src/parking/persistence/ParkingLotRegistryImpl.kt
  visible: true
  text: |
    package parking.persistence

    import parking.domain.entity.ParkingLot

    class ParkingLotRegistryImpl : ParkingLotRegistry {
        private var instance: ParkingLot? = null

        override fun create(capacity: Int) {
            this.instance = ParkingLot(capacity)
        }

        override fun get() = instance
    }
  learner_created: true
- name: src/parking/console/Application.kt
  visible: true
  text: |
    package parking.console

    import parking.application.gateway.ParkingLotGatewayImpl
    import parking.application.interactor.CreateParkingLotImpl
    import parking.application.interactor.LeaveSpotImpl
    import parking.application.interactor.ParkCarImpl
    import parking.console.command.CommandFactory
    import parking.console.command.CommandFactoryImpl
    import parking.console.controller.ParkingLotController
    import parking.console.controller.ParkingLotControllerImpl
    import parking.domain.gateway.ParkingLotGateway
    import parking.domain.usecase.CreateParkingLot
    import parking.domain.usecase.LeaveSpot
    import parking.domain.usecase.ParkCar
    import parking.persistence.ParkingLotRegistry
    import parking.persistence.ParkingLotRegistryImpl

    object Application {
        private val parkingLotRegistry: ParkingLotRegistry = ParkingLotRegistryImpl()
        private val parkingLotGateway: ParkingLotGateway = ParkingLotGatewayImpl(
            parkingLotRegistry = parkingLotRegistry
        )

        private val useCaseLeaveSpot: LeaveSpot = LeaveSpotImpl(
            parkingLotGateway = parkingLotGateway
        )

        private val useCaseParkCar: ParkCar = ParkCarImpl(
            parkingLotGateway = parkingLotGateway
        )

        private val useCaseCreateParkingLot: CreateParkingLot = CreateParkingLotImpl(
            parkingLotRegistry = parkingLotRegistry
        )

        val commandFactory: CommandFactory = CommandFactoryImpl()

        val parkingLotController: ParkingLotController = ParkingLotControllerImpl(
            parkCar = useCaseParkCar,
            leaveSpot = useCaseLeaveSpot,
            createParkingLot = useCaseCreateParkingLot
        )
    }
  learner_created: true
- name: src/parking/console/controller/ParkingLotController.kt
  visible: true
  text: |
    package parking.console.controller

    import parking.console.command.CommandCreate
    import parking.console.command.CommandLeave
    import parking.console.command.CommandPark

    interface ParkingLotController {
        fun parkCar(command: CommandPark)
        fun leaveSpot(command: CommandLeave)
        fun create(commandCreate: CommandCreate)
    }
  learner_created: true
- name: src/parking/console/command/CommandLeave.kt
  visible: true
  text: |
    package parking.console.command

    class CommandLeave(val spotId: Int) : Command
  learner_created: true
- name: src/parking/console/command/CommandFactory.kt
  visible: true
  text: |
    package parking.console.command

    interface CommandFactory {
        fun commandFromString(input: String): Command
    }
  learner_created: true
- name: src/parking/domain/gateway/ParkingLotGateway.kt
  visible: true
  text: |
    package parking.domain.gateway

    import parking.domain.entity.Car
    import parking.domain.entity.Spot

    interface ParkingLotGateway {
        fun park(car: Car, spot: Spot): Spot
        fun leave(spot: Spot): Car?
        fun findSpotById(id: Int): Spot?
        fun findEmptySpot(): Spot?
    }
  learner_created: true
- name: src/parking/domain/usecase/StatusParkingLot.kt
  visible: true
  learner_created: true
- name: src/parking/application/interactor/StatusParkingLotImpl.kt
  visible: true
  learner_created: true
- name: src/parking/console/command/CommandStatus.kt
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/projects/75/stages/419/implement#comment
status: Solved
feedback:
  message: Congratulations!
  time: Mon, 27 Sep 2021 16:02:07 UTC
record: -1
